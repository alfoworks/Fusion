from vk_api.bot_longpoll import VkBotEvent
from vk_api.utils import get_random_id
from FusionBotMODULES import Fusion, ModuleManager

load_module = False  # Если False - модуль не загрузится. Если переменная не существует или установлена на True,
# то модуль загрузится


class Module(ModuleManager.Module):  # Класс должен ОБЯЗАТЕЛЬНО называться Module. В ином случае
    # произойдет ошибка и бот не запустится (а с ним и модуль)
    name = "DummyModule"  # Имя модуля
    description = "Хуйня ебаная"  # Описание модуля

    # Множество чатов, где будет РАБОТАТЬ данный модуль. В иных других чатах он будет скрыт полностью за исключением
    # /params, но эта команда закрыта правами и её лучше не вызывать там, где не надо. Если множество пусто - белый
    # список не применяется
    GUILD_LOCK = {}

    # Основной метод модуля, выполняется в конце инициализации бота (после загрузки параметров и модулей)
    def run(self, client: Fusion):
        # client - обьект, через который вы будете отправлять сообщения и делать любую другую работу с вк
        # client.module_manager - обьект менеджера модулей. Предоставляет регистры

        """
            Система параметров бота
            client.module_manager.add_param(key, value) - добавляет параметр и устанавливает его начальное значение.
            Если параметр уже создан и в нем есть значение, ничего не делает.

            Изменение параметра -
            client.module_manager.params[key] = value

            Затем необходимо сохранить
            client.module_manager.save_params()
            После add_param сохранение не требуется

            ===========

            Проверить наличие разрешения у пользователя -
            client.module_manager.has_permission(permission: str, user_id)
            Подробнее о системе разрешений в DummyCommand

            Создать новую задачу можно через библиотеку schedule.
            Ваш модуль может (и должен) получить уникальный Scheduler через client.module_manager.get_scheduler(self)
            Ваша задача не должна иметь незавершаемый цикл, поскольку задачи выполняются синхронно.
            Гарантируется выполнение задач точно по времени настолько возможно, как позволяет система.

            Создание команды:
        """
        class DummyCommand(ModuleManager.Command):
            name = "dummy"  # название команды.
            description = "Хуйня ебаная"  # описание
            args = "аргумент1 аргумент2"  # влияет только на вывод в /cmds (для пользователя)
            keys = []  # так же влияет только на вывод в /cmds. Здесь вводится без двойного тире.
            permissions = []  # права, необходимые для запуска команды.
            """ О системе прав доступа
            Система прав предоставляется не ВК, а ботом.
            Наследования прав нет. Если вам нужно создать команду, которая будет доступна одному праву и выше - просто 
            вбейте самое низшее право и выдайте его всем, кто выше.
            По умолчанию поддерживается право administrator.
            Для регулирования прав - /permissions. Подробности в /cmds
            """
            no_args_pass = False  # Если True, пропустит человека без прав, если он не передавал аргументов в команду

            # главный метод команды. Вызывается при вызове команды.
            def run(self, event: VkBotEvent, args, keys):
                client.get_api().messages.send(
                    peer_id=event.obj.peer_id,
                    message="Пощел нахуй!",
                    random_id=get_random_id()
                )
                """
                    args - список аргументов после команды. Деление происходит по пробелу.
                    keys - словарь (нестандартный, вместо ["str"] можно использовать .str):
                        а) Введенных через одинарное тире букв как ключ и True как значение.
                        б) Введенных через двойное тире слов как ключ и True как значение.
                        в) Введенных через двойное тире слов с = и последующим значением.
                        
                        Например:
                            -abc равно --a --b --c, а это будет преобразовано в {"a":True, "b": True, "c": True}
                            --abc будет преобразовано в {"abc": True}
                            --abc=123 будет преобразовано в {"abc": "123"}
                        
                        Словарь является измененным классом. Вы можете обращаться к элементам словаря без использования
                        []. Например - keys.abc вернет True в случае --abc, и вернет None, если такого ключа нет
                """
                return True  # если вернуть False, пользователю покажет синтаксис команды

        client.module_manager.add_command(DummyCommand(), self)  # Регистрация команды

    # Данный метод вызывается при ЛЮБОМ событии, которое получает бот через LongPoll.
    def on_event(self, client: Fusion, event: VkBotEvent):
        pass
